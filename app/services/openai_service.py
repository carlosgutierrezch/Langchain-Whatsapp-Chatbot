from openai import OpenAI
import shelve
from dotenv import load_dotenv
import os
import time
import logging
from pathlib import Path
from app.services.WorkflowManager import Workflow
from app.services.State import InputState, OutputState


load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")

agent_executor = Workflow()



def check_if_thread_exists(wa_id):
    with shelve.open("threads_db") as threads_shelf:
        return threads_shelf.get(wa_id, None)


def store_thread(wa_id, thread_id):
    with shelve.open("threads_db", writeback=True) as threads_shelf:
        threads_shelf[wa_id] = thread_id


def run_assistant(query, name):
    """
    Run the LangChain SQL agent to process a query and return the response.

    Parameters:
        query (str): The SQL query or question to ask the agent.
        name (str): The name of the user (for logging or personalized prompts, if needed).

    Returns:
        str: The response generated by the LangChain SQL agent.
    """
    try:
        # Log the received query for tracking
        logging.info(f"Received query from {name}: {query}")

        # Use the LangChain agent to execute the query and get a response
        response = agent_executor.run_sql_agent(query,name)

        # Log the generated response
        logging.info(f"Generated response: {response}")

        return response

    except Exception as e:
        logging.error(f"Error running assistant for query '{query}': {e}")
        return "An error occurred while processing your request."


def generate_response(query, wa_id, name):
    """
    Generate a response to a query, storing any conversation thread ID as needed.

    Parameters:
        query (str): The SQL query or question to ask the agent.
        wa_id (str): The WhatsApp ID or other user identifier.
        name (str): The name of the user.

    Returns:
        str: The response from the assistant.
    """
    # Check if there is already a thread_id for the wa_id
    thread_id = check_if_thread_exists(wa_id)

    # If a thread doesn't exist, create one and store it
    if thread_id is None:
        logging.info(f"Creating new thread for {name} with wa_id {wa_id}")
        thread = {}  # Placeholder for thread logic (if needed in future for tracking)
        store_thread(wa_id, thread_id)
    else:
        logging.info(f"Retrieving existing thread for {name} with wa_id {wa_id}")

    # Run the agent and get the response
    new_message = run_assistant(query, name)

    return new_message
